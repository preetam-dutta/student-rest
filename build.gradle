import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.6.RELEASE")
  }
}
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group 'com.preet.dstny'
version '1.1.0-SNAPSHOT'

bootJar {
  baseName(project.name)
}

repositories {
  jcenter()
}

sourceCompatibility = '1.11'
targetCompatibility = '1.11'

dependencies {
  compileOnly('org.projectlombok:lombok:1.18.10')
  annotationProcessor('org.projectlombok:lombok:1.18.10')
  implementation('org.springframework.boot:spring-boot-starter-webflux')
  implementation('org.springframework.data:spring-data-cassandra')
  testImplementation('org.projectlombok:lombok:1.18.10')
  testImplementation('org.testcontainers:testcontainers:1.12.2')
  testImplementation('org.testcontainers:cassandra:1.12.2')
  testImplementation('org.springframework.boot:spring-boot-starter-test')
  testImplementation('io.projectreactor:reactor-test')
}

test {
  // all tests will be executed via TestSuite.class
  // excluding duplication individual test execution,
  // comment this to run individual tests.
  exclude('com/preet/dstny/student/data/**')
}

ext.buildDockerImage = { ->
  if (Os.isFamily(Os.FAMILY_WINDOWS)) {
    exec {
      commandLine 'docker/build-image.bat', project.version
    }
  } else if (Os.isFamily(Os.FAMILY_UNIX)) {
    exec {
      commandLine 'docker/build-image.sh', project.version
    }
  }
}

task dockerImage(type: Copy) {
  description = 'copies the Dockerfile and other files required for building the docker image to build location'
  group = 'build'
  def jarName = project.name + "-" + project.version + ".jar"
  from "$buildDir/libs/$jarName",
      "docker/Dockerfile",
      "docker/liveness.sh"
  into "$buildDir/docker/"
  rename "$jarName", "$project.name" + ".jar"

  doLast {
    buildDockerImage()
  }
}

check.finalizedBy(dockerImage)